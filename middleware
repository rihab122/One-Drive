const db = require('../database');

async function addPerson(req, res, next) {
    let fullName = req.body.full_name;
    let query = "INSERT INTO individuals (full_name) VALUES (?);";
    const promisePool = db.promise();

    try {
        const [result] = await promisePool.query(query, [fullName]);
        req.insertId = result.insertId;
        req.success = true;
    } catch (err) {
        console.error("DB Error:", err);
        req.success = false;
        return res.status(500).json({ message: "שגיאת מסד נתונים" });
    }
    next();
}

async function listPeople(req, res, next) {
    let query = "SELECT * FROM individuals;";
    const promisePool = db.promise();

    try {
        const [rows] = await promisePool.query(query);
        req.success = true;
        req.people = rows;
    } catch (err) {
        req.success = false;
        return res.status(500).json({ message: "שגיאת מסד נתונים" });
    }
    next();
}

module.exports = { addPerson, listPeople };

async function fetchReadings(req, res, next) {
    const sql = "SELECT * FROM pressure_readings WHERE person_id = ? ORDER BY recorded_at DESC";
    try {
        const [data] = await db.promise().query(sql, [req.params.person_id]);
        req.success = true;
        req.readings = data;
    } catch (err) {
        console.error("DB Error:", err);
        req.success = false;
        return res.status(500).json({ message: "שגיאת מסד נתונים" });
    }
    next();
}
async function fetchReadingHistory(req, res, next) {
    const sql = "SELECT * FROM pressure_readings ORDER BY recorded_at DESC";

    try {
        const [results] = await db.promise().query(sql);
        if (!results.length) {
            req.success = true;
            req.readings = [];
            return next();
        }

        let totalSystolic = 0, totalDiastolic = 0, count = results.length;
        results.forEach(entry => {
            totalSystolic += entry.high_pressure;
            totalDiastolic += entry.low_pressure;
        });

        let avgSys = totalSystolic / count;
        let avgDia = totalDiastolic / count;

        req.readings = results.map(entry => ({
            ...entry,
            abnormal: entry.high_pressure > avgSys * 1.2 || entry.low_pressure > avgDia * 1.2
        }));

        req.success = true;
    } catch (err) {
        console.error("Database Query Error:", err);
        req.success = false;
        return res.status(500).json({ message: "שגיאת מסד נתונים" });
    }
    next();
}


async function computeMonthlyStats(req, res, next) {
    const { year, month } = req.params;
    const baseQuery = "SELECT person_id, ROUND(AVG(high_pressure), 2) AS avg_high, ROUND(AVG(low_pressure), 2) AS avg_low";
    const abnormalQuery = `, SUM(
            CASE 
                WHEN high_pressure > (SELECT AVG(high_pressure) * 1.2 FROM pressure_readings) 
                OR low_pressure > (SELECT AVG(low_pressure) * 1.2 FROM pressure_readings) 
                THEN 1 ELSE 0 
            END) AS abnormal_count`;
    const condition = " FROM pressure_readings WHERE YEAR(recorded_at) = ? AND MONTH(recorded_at) = ?";
    const groupBy = " GROUP BY person_id ORDER BY person_id";

    const fullQuery = baseQuery + abnormalQuery + condition + groupBy;

    try {
        const [results] = await db.promise().query(fullQuery, [year, month]);
        req.success = true;
        req.summary = results;
    } catch (err) {
        console.error("⛔ Database Error:", err);
        req.success = false;
        return res.status(500).json({ message: "שגיאת מסד נתונים" });
    }
    next();
}

module.exports = { fetchReadings, addNewReading, fetchReadingHistory, computeMonthlyStats };

